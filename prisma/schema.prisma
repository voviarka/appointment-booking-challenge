// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SalesManager {
  id              Int                          @id @default(autoincrement())
  name            String                       @db.VarChar(250)
  languages       SalesManagerLanguage[]
  products        SalesManagerProduct[]
  customerRatings SalesManagerCustomerRating[]
  slots           Slot[]

  @@map("sales_managers")
}

model Language {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique @db.VarChar(100)
  salesManagers SalesManagerLanguage[]

  @@map("languages")
}

model Product {
  id            Int                   @id @default(autoincrement())
  name          String                @unique @db.VarChar(100)
  salesManagers SalesManagerProduct[]

  @@map("products")
}

model CustomerRating {
  id            Int                          @id @default(autoincrement())
  name          String                       @unique @db.VarChar(100)
  salesManagers SalesManagerCustomerRating[]

  @@map("customer_ratings")
}

model SalesManagerLanguage {
  salesManager   SalesManager @relation(fields: [salesManagerId], references: [id])
  salesManagerId Int
  language       Language     @relation(fields: [languageId], references: [id])
  languageId     Int

  @@id([salesManagerId, languageId])
  @@map("sales_manager_languages")
}

model SalesManagerProduct {
  salesManager   SalesManager @relation(fields: [salesManagerId], references: [id])
  salesManagerId Int
  product        Product      @relation(fields: [productId], references: [id])
  productId      Int

  @@id([salesManagerId, productId])
  @@map("sales_manager_products")
}

model SalesManagerCustomerRating {
  salesManager     SalesManager   @relation(fields: [salesManagerId], references: [id])
  salesManagerId   Int
  customerRating   CustomerRating @relation(fields: [customerRatingId], references: [id])
  customerRatingId Int

  @@id([salesManagerId, customerRatingId])
  @@map("sales_manager_customer_ratings")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(250)
  email    String @unique @db.VarChar(250)
  language String @db.VarChar(250)
  slots    Slot[]

  @@map("users")
}

model Slot {
  id             Int          @id @default(autoincrement())
  start_date     DateTime     @db.Timestamptz
  end_date       DateTime     @db.Timestamptz
  booked         Boolean      @default(false)
  salesManager   SalesManager @relation(fields: [salesManagerId], references: [id])
  salesManagerId Int          @map("sales_manager_id")
  user           User?        @relation(fields: [userId], references: [id])
  userId         Int?         @map("user_id")

  @@map("slots")
}
